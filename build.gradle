plugins {
    id 'java'
    id 'org.springframework.boot' version '3.2.3'
    id 'io.spring.dependency-management' version '1.1.6'
}

group = 'com.outsider'
version = '0.0.1-SNAPSHOT'

wrapper {
    gradleVersion = '8.5'
    distributionType = 'bin'
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    // Maven Local Repository 추가
    mavenLocal()
    
    // Nexus Private Repository
    maven {
        url = project.findProperty("nexusUrl") ?: System.getenv("NEXUS_URL") ?: "http://tripleyoung.synology.me:8071/repository/maven-public/"
        allowInsecureProtocol = true // HTTP 허용
        credentials {
            username = project.findProperty("nexusUsername") ?: System.getenv("NEXUS_USERNAME") ?: "admin"
            password = project.findProperty("nexusPassword") ?: System.getenv("NEXUS_PASSWORD") ?: "97dudnjs!12"
        }
    }
    
    mavenCentral()
}

ext {
    springBootVersion = '3.2.3'
    springCloudVersion = '2023.0.0'
    lombokVersion = '1.18.30'
    mapstructVersion = '1.5.5.Final'
    jjwtVersion = '0.11.5'
    minioVersion = '8.5.2'
    googleApiClientVersion = '2.2.0'
    googleOAuthClientVersion = '1.34.1'
    googleHttpClientVersion = '1.43.3'
    springDocVersion = '2.3.0'
    querydslVersion = '5.0.0'
    springSecurityVersion = '6.2.1'
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}

dependencies {
    // Config 공통 모듈 의존성 - Properties 클래스 사용을 위해
    implementation 'com.ycoding:config-common:1.0.1'
    // Spring Cloud Config Client
    implementation 'org.springframework.cloud:spring-cloud-starter-config'
    implementation 'org.springframework.cloud:spring-cloud-starter-bootstrap'
    
    implementation "org.springframework.boot:spring-boot-starter-actuator:${springBootVersion}"
    implementation "org.springframework.boot:spring-boot-starter-data-jpa:${springBootVersion}"
    implementation "org.springframework.boot:spring-boot-starter-data-redis:${springBootVersion}"
    implementation "org.springframework.boot:spring-boot-starter-mail:${springBootVersion}"
    implementation "org.springframework.boot:spring-boot-starter-oauth2-client:${springBootVersion}"
    implementation "org.springframework.boot:spring-boot-starter-security:${springBootVersion}"
    implementation "org.springframework.boot:spring-boot-starter-validation:${springBootVersion}"
    implementation "org.springframework.boot:spring-boot-starter-web:${springBootVersion}"
    implementation "org.springframework.kafka:spring-kafka:${springBootVersion}"
    implementation "org.springframework.boot:spring-boot-starter-webflux:${springBootVersion}"
    
    // Lombok
    compileOnly "org.projectlombok:lombok:${lombokVersion}"
    annotationProcessor "org.projectlombok:lombok:${lombokVersion}"
    testCompileOnly "org.projectlombok:lombok:${lombokVersion}"
    testAnnotationProcessor "org.projectlombok:lombok:${lombokVersion}"
    
    // MapStruct
    implementation "org.mapstruct:mapstruct:${mapstructVersion}"
    annotationProcessor "org.mapstruct:mapstruct-processor:${mapstructVersion}"
    annotationProcessor "org.projectlombok:lombok-mapstruct-binding:0.2.0"
    testAnnotationProcessor "org.mapstruct:mapstruct-processor:${mapstructVersion}"
    
    // QueryDSL
    implementation "com.querydsl:querydsl-jpa:${querydslVersion}:jakarta"
    annotationProcessor(
        "com.querydsl:querydsl-apt:${querydslVersion}:jakarta",
        "jakarta.annotation:jakarta.annotation-api",
        "jakarta.persistence:jakarta.persistence-api"
    )
    
    developmentOnly "org.springframework.boot:spring-boot-devtools:${springBootVersion}"
    runtimeOnly 'com.mysql:mysql-connector-j'
    
    // Test dependencies
    testImplementation "org.springframework.boot:spring-boot-starter-test:${springBootVersion}"
    testImplementation "org.springframework.security:spring-security-test:${springSecurityVersion}"
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
    implementation 'com.h2database:h2'
    
    implementation "io.minio:minio:${minioVersion}"
    implementation "io.jsonwebtoken:jjwt-api:${jjwtVersion}"
    runtimeOnly "io.jsonwebtoken:jjwt-impl:${jjwtVersion}"
    runtimeOnly "io.jsonwebtoken:jjwt-jackson:${jjwtVersion}"
    implementation "com.google.api-client:google-api-client:${googleApiClientVersion}"
    implementation "com.google.oauth-client:google-oauth-client:${googleOAuthClientVersion}"
    implementation "com.google.http-client:google-http-client-gson:${googleHttpClientVersion}"
    implementation "org.springdoc:springdoc-openapi-starter-webmvc-ui:${springDocVersion}"
    implementation 'org.apache.httpcomponents.client5:httpclient5:5.2.1'
}

def generatedSourcesDir = "$buildDir/generated"

tasks.withType(JavaCompile) {
    options.compilerArgs += [
        '-Amapstruct.defaultComponentModel=spring'
    ]
    options.annotationProcessorGeneratedSourcesDirectory = file(generatedSourcesDir)
}

clean {
    delete file(generatedSourcesDir)
}

tasks.named('test') {
    useJUnitPlatform()
}

// OpenAPI 관련 설정 추가 - NPX 의존성 문제로 비활성화
// apply from: 'openapi-interfaces.gradle'
// apply from: 'openapi-flutter.gradle'